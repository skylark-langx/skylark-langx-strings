{"version":3,"sources":["words.js"],"names":["define","strings","rsBreakRange","rsMathOpRange","rsBreak","rsDingbat","rsLower","rsMisc","rsRegional","rsSurrPair","rsUpper","rsMiscLower","rsMiscUpper","reOptMod","rsSeq","join","rsEmoji","reUnicodeWords","RegExp","hasUnicodeWord","prototype","test","bind","reAsciiWord","words","string","pattern","undefined","match","unicodeWords","asciiWords"],"mappings":";;;;;;;AAAAA,QACC,aACC,SAASC,GAEV,MAeMC,EAAeC,8OAIfC,MAAcF,KAGdG,EAAY,oBACZC,EAAU,8BACVC,sBAA8BL,EAHpB,0EAOVM,EAAa,kCACbC,EAAa,qCACbC,EAAU,8BAIVC,QAAoBL,KAAWC,KAC/BK,QAAoBF,KAAWH,KAG/BM,EAAW,8GAKXC,EAJW,oBAIQD,mBAhBL,qBAa6BL,EAAYC,GAAYM,KAAK,QAD7D,oBACgFF,MAI3FG,SAAiBX,EAAWG,EAAYC,GAAYM,KAAK,QAAQD,IAEjEG,EAAiBC,WAClBR,KAAWJ,sCAAiCF,EAASM,EAAS,KAAKK,KAAK,WACxEH,sCAAqCR,EAASM,EAAUC,EAAa,KAAKI,KAAK,WAC/EL,KAAWC,qCACXD,kCARc,mDADA,mDAYjB,OACAM,GACAD,KAAK,KAAM,KAcb,MAAMI,EAAiBD,OAAOE,UAAUC,KAAKC,KAC3C,sEAIIC,EAAc,4CA+BpB,OAAOtB,EAAQuB,MATf,SAAeC,EAAQC,GACrB,QAAgBC,IAAZD,EAEF,OADeP,EAAeM,GAlClC,SAAsBA,GACpB,OAAOA,EAAOG,MAAMX,GAiCsBY,CAAaJ,GAtBzD,SAAoBA,GAClB,OAAOA,EAAOG,MAAML,GAqB6CO,CAAWL,QAG5E,OAAOA,EAAOG,MAAMF","file":"../words.js","sourcesContent":["define([\r\n\t\"./strings\"\r\n],function(strings){\r\n\t/** Used to compose unicode character classes. */\r\n\tconst rsAstralRange = '\\\\ud800-\\\\udfff'\r\n\tconst rsComboMarksRange = '\\\\u0300-\\\\u036f'\r\n\tconst reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f'\r\n\tconst rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff'\r\n\tconst rsComboMarksExtendedRange = '\\\\u1ab0-\\\\u1aff'\r\n\tconst rsComboMarksSupplementRange = '\\\\u1dc0-\\\\u1dff'\r\n\tconst rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange + rsComboMarksExtendedRange + rsComboMarksSupplementRange\r\n\tconst rsDingbatRange = '\\\\u2700-\\\\u27bf'\r\n\tconst rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff'\r\n\tconst rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7'\r\n\tconst rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf'\r\n\tconst rsPunctuationRange = '\\\\u2000-\\\\u206f'\r\n\tconst rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000'\r\n\tconst rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde'\r\n\tconst rsVarRange = '\\\\ufe0e\\\\ufe0f'\r\n\tconst rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange\r\n\r\n\t/** Used to compose unicode capture groups. */\r\n\tconst rsApos = \"['\\u2019]\"\r\n\tconst rsBreak = `[${rsBreakRange}]`\r\n\tconst rsCombo = `[${rsComboRange}]`\r\n\tconst rsDigit = '\\\\d'\r\n\tconst rsDingbat = `[${rsDingbatRange}]`\r\n\tconst rsLower = `[${rsLowerRange}]`\r\n\tconst rsMisc = `[^${rsAstralRange}${rsBreakRange + rsDigit + rsDingbatRange + rsLowerRange + rsUpperRange}]`\r\n\tconst rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]'\r\n\tconst rsModifier = `(?:${rsCombo}|${rsFitz})`\r\n\tconst rsNonAstral = `[^${rsAstralRange}]`\r\n\tconst rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}'\r\n\tconst rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]'\r\n\tconst rsUpper = `[${rsUpperRange}]`\r\n\tconst rsZWJ = '\\\\u200d'\r\n\r\n\t/** Used to compose unicode regexes. */\r\n\tconst rsMiscLower = `(?:${rsLower}|${rsMisc})`\r\n\tconst rsMiscUpper = `(?:${rsUpper}|${rsMisc})`\r\n\tconst rsOptContrLower = `(?:${rsApos}(?:d|ll|m|re|s|t|ve))?`\r\n\tconst rsOptContrUpper = `(?:${rsApos}(?:D|LL|M|RE|S|T|VE))?`\r\n\tconst reOptMod = `${rsModifier}?`\r\n\tconst rsOptVar = `[${rsVarRange}]?`\r\n\tconst rsOptJoin = `(?:${rsZWJ}(?:${[rsNonAstral, rsRegional, rsSurrPair].join('|')})${rsOptVar + reOptMod})*`\r\n\tconst rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])'\r\n\tconst rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])'\r\n\tconst rsSeq = rsOptVar + reOptMod + rsOptJoin\r\n\tconst rsEmoji = `(?:${[rsDingbat, rsRegional, rsSurrPair].join('|')})${rsSeq}`\r\n\r\n\tconst reUnicodeWords = RegExp([\r\n\t  `${rsUpper}?${rsLower}+${rsOptContrLower}(?=${[rsBreak, rsUpper, '$'].join('|')})`,\r\n\t  `${rsMiscUpper}+${rsOptContrUpper}(?=${[rsBreak, rsUpper + rsMiscLower, '$'].join('|')})`,\r\n\t  `${rsUpper}?${rsMiscLower}+${rsOptContrLower}`,\r\n\t  `${rsUpper}+${rsOptContrUpper}`,\r\n\t  rsOrdUpper,\r\n\t  rsOrdLower,\r\n\t  `${rsDigit}+`,\r\n\t  rsEmoji\r\n\t].join('|'), 'g')\r\n\r\n\t/**\r\n\t * Splits a Unicode `string` into an array of its words.\r\n\t *\r\n\t * @private\r\n\t * @param {string} The string to inspect.\r\n\t * @returns {Array} Returns the words of `string`.\r\n\t */\r\n\tfunction unicodeWords(string) {\r\n\t  return string.match(reUnicodeWords)\r\n\t}\r\n\r\n\r\n\tconst hasUnicodeWord = RegExp.prototype.test.bind(\r\n\t  /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/\r\n\t)\r\n\r\n\t/** Used to match words composed of alphanumeric characters. */\r\n\tconst reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g\r\n\r\n\tfunction asciiWords(string) {\r\n\t  return string.match(reAsciiWord)\r\n\t}\r\n\r\n\t/**\r\n\t * Splits `string` into an array of its words.\r\n\t *\r\n\t * @since 3.0.0\r\n\t * @category String\r\n\t * @param {string} [string=''] The string to inspect.\r\n\t * @param {RegExp|string} [pattern] The pattern to match words.\r\n\t * @returns {Array} Returns the words of `string`.\r\n\t * @example\r\n\t *\r\n\t * words('fred, barney, & pebbles')\r\n\t * // => ['fred', 'barney', 'pebbles']\r\n\t *\r\n\t * words('fred, barney, & pebbles', /[^, ]+/g)\r\n\t * // => ['fred', 'barney', '&', 'pebbles']\r\n\t */\r\n\tfunction words(string, pattern) {\r\n\t  if (pattern === undefined) {\r\n\t    const result = hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string)\r\n\t    return result || []\r\n\t  }\r\n\t  return string.match(pattern) || []\r\n\t}\r\n\r\n\t\r\n\treturn strings.words = words;\r\n});"]}