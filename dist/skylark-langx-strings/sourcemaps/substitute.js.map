{"version":3,"sources":["substitute.js"],"names":["define","strings","substitute","template","map","transform","thisObject","getObject","key","match","retVal","getValue","keys","obj","_k","pop","split","reverse","window","proxy","v","replace","format","value","call","toString"],"mappings":";;;;;;;AAAAA,QACC,aACC,SAASC,GAsDV,OAAOA,EAAQC,WArDZ,SAAgCC,EAE5BC,EAEAC,EAEAC,GAmBA,SAASC,EAAUC,EAAKJ,GACpB,GAAII,EAAIC,MAAM,MAAO,CACjB,IAAIC,EACAC,EAAW,SAASC,EAAMC,GACtB,IAAIC,EAAKF,EAAKG,MACd,OAAID,EACKD,EAAIC,GACFH,EAASC,EAAMF,EAASG,EAAIC,IADd,KAGdJ,GAGnB,OAAOC,EAASH,EAAIQ,MAAM,KAAKC,UAAWb,GAE1C,OAAOA,EAAII,GAInB,OAxBAF,EAAaA,GAAcY,OAC3Bb,EAAYA,EACRc,MAAMb,EAAYD,GAAa,SAASe,GACpC,OAAOA,GAqBRjB,EAASkB,QAAQ,yCACpB,SAASZ,EAAOD,EAAKc,GACjB,IAAIC,EAAQhB,EAAUC,EAAKJ,GAI3B,OAHIkB,IACAC,EAAQhB,EAAUe,EAAQhB,GAAYkB,KAAKlB,EAAYiB,EAAOf,IAE3DH,EAAUkB,EAAOf,GAAKiB","file":"../substitute.js","sourcesContent":["define([\r\n\t\"./strings\"\r\n],function(strings){\r\n    function substitute( /*String*/ template,\r\n        /*Object|Array*/\r\n        map,\r\n        /*Function?*/\r\n        transform,\r\n        /*Object?*/\r\n        thisObject) {\r\n        // summary:\r\n        //    Performs parameterized substitutions on a string. Throws an\r\n        //    exception if any parameter is unmatched.\r\n        // template:\r\n        //    a string with expressions in the form `${key}` to be replaced or\r\n        //    `${key:format}` which specifies a format function. keys are case-sensitive.\r\n        // map:\r\n        //    hash to search for substitutions\r\n        // transform:\r\n        //    a function to process all parameters before substitution takes\r\n\r\n\r\n        thisObject = thisObject || window;\r\n        transform = transform ?\r\n            proxy(thisObject, transform) : function(v) {\r\n                return v;\r\n            };\r\n\r\n        function getObject(key, map) {\r\n            if (key.match(/\\./)) {\r\n                var retVal,\r\n                    getValue = function(keys, obj) {\r\n                        var _k = keys.pop();\r\n                        if (_k) {\r\n                            if (!obj[_k]) return null;\r\n                            return getValue(keys, retVal = obj[_k]);\r\n                        } else {\r\n                            return retVal;\r\n                        }\r\n                    };\r\n                return getValue(key.split(\".\").reverse(), map);\r\n            } else {\r\n                return map[key];\r\n            }\r\n        }\r\n\r\n        return template.replace(/\\$\\{([^\\s\\:\\}]+)(?:\\:([^\\s\\:\\}]+))?\\}/g,\r\n            function(match, key, format) {\r\n                var value = getObject(key, map);\r\n                if (format) {\r\n                    value = getObject(format, thisObject).call(thisObject, value, key);\r\n                }\r\n                return transform(value, key).toString();\r\n            }); // String\r\n    }\r\n\r\n\treturn strings.substitute = substitute;\r\n});"]}